package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ExtractedEntity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ExtractedAddresses":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedAddresses")
					return
				}
				z.ExtractedAddresses = nil
			} else {
				if z.ExtractedAddresses == nil {
					z.ExtractedAddresses = new(string)
				}
				*z.ExtractedAddresses, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedAddresses")
					return
				}
			}
		case "ExtractedContacts":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedContacts")
					return
				}
				z.ExtractedContacts = nil
			} else {
				if z.ExtractedContacts == nil {
					z.ExtractedContacts = new(string)
				}
				*z.ExtractedContacts, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedContacts")
					return
				}
			}
		case "ExtractedEmails":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedEmails")
					return
				}
				z.ExtractedEmails = nil
			} else {
				if z.ExtractedEmails == nil {
					z.ExtractedEmails = new(string)
				}
				*z.ExtractedEmails, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedEmails")
					return
				}
			}
		case "ExtractedMeetings":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedMeetings")
					return
				}
				z.ExtractedMeetings = nil
			} else {
				if z.ExtractedMeetings == nil {
					z.ExtractedMeetings = new(string)
				}
				*z.ExtractedMeetings, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedMeetings")
					return
				}
			}
		case "ExtractedPhones":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedPhones")
					return
				}
				z.ExtractedPhones = nil
			} else {
				if z.ExtractedPhones == nil {
					z.ExtractedPhones = new(string)
				}
				*z.ExtractedPhones, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedPhones")
					return
				}
			}
		case "ExtractedTasks":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedTasks")
					return
				}
				z.ExtractedTasks = nil
			} else {
				if z.ExtractedTasks == nil {
					z.ExtractedTasks = new(string)
				}
				*z.ExtractedTasks, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedTasks")
					return
				}
			}
		case "ExtractedUrls":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedUrls")
					return
				}
				z.ExtractedUrls = nil
			} else {
				if z.ExtractedUrls == nil {
					z.ExtractedUrls = new(string)
				}
				*z.ExtractedUrls, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ExtractedUrls")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ExtractedEntity) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "ExtractedAddresses"
	err = en.Append(0x87, 0xb2, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedAddresses == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedAddresses)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedAddresses")
			return
		}
	}
	// write "ExtractedContacts"
	err = en.Append(0xb1, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedContacts == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedContacts)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedContacts")
			return
		}
	}
	// write "ExtractedEmails"
	err = en.Append(0xaf, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedEmails == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedEmails)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedEmails")
			return
		}
	}
	// write "ExtractedMeetings"
	err = en.Append(0xb1, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedMeetings == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedMeetings)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedMeetings")
			return
		}
	}
	// write "ExtractedPhones"
	err = en.Append(0xaf, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedPhones == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedPhones)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedPhones")
			return
		}
	}
	// write "ExtractedTasks"
	err = en.Append(0xae, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedTasks == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedTasks)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedTasks")
			return
		}
	}
	// write "ExtractedUrls"
	err = en.Append(0xad, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73)
	if err != nil {
		return
	}
	if z.ExtractedUrls == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.ExtractedUrls)
		if err != nil {
			err = msgp.WrapError(err, "ExtractedUrls")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ExtractedEntity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "ExtractedAddresses"
	o = append(o, 0x87, 0xb2, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73)
	if z.ExtractedAddresses == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedAddresses)
	}
	// string "ExtractedContacts"
	o = append(o, 0xb1, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73)
	if z.ExtractedContacts == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedContacts)
	}
	// string "ExtractedEmails"
	o = append(o, 0xaf, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73)
	if z.ExtractedEmails == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedEmails)
	}
	// string "ExtractedMeetings"
	o = append(o, 0xb1, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73)
	if z.ExtractedMeetings == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedMeetings)
	}
	// string "ExtractedPhones"
	o = append(o, 0xaf, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73)
	if z.ExtractedPhones == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedPhones)
	}
	// string "ExtractedTasks"
	o = append(o, 0xae, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73)
	if z.ExtractedTasks == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedTasks)
	}
	// string "ExtractedUrls"
	o = append(o, 0xad, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73)
	if z.ExtractedUrls == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.ExtractedUrls)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExtractedEntity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ExtractedAddresses":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedAddresses = nil
			} else {
				if z.ExtractedAddresses == nil {
					z.ExtractedAddresses = new(string)
				}
				*z.ExtractedAddresses, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedAddresses")
					return
				}
			}
		case "ExtractedContacts":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedContacts = nil
			} else {
				if z.ExtractedContacts == nil {
					z.ExtractedContacts = new(string)
				}
				*z.ExtractedContacts, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedContacts")
					return
				}
			}
		case "ExtractedEmails":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedEmails = nil
			} else {
				if z.ExtractedEmails == nil {
					z.ExtractedEmails = new(string)
				}
				*z.ExtractedEmails, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedEmails")
					return
				}
			}
		case "ExtractedMeetings":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedMeetings = nil
			} else {
				if z.ExtractedMeetings == nil {
					z.ExtractedMeetings = new(string)
				}
				*z.ExtractedMeetings, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedMeetings")
					return
				}
			}
		case "ExtractedPhones":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedPhones = nil
			} else {
				if z.ExtractedPhones == nil {
					z.ExtractedPhones = new(string)
				}
				*z.ExtractedPhones, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedPhones")
					return
				}
			}
		case "ExtractedTasks":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedTasks = nil
			} else {
				if z.ExtractedTasks == nil {
					z.ExtractedTasks = new(string)
				}
				*z.ExtractedTasks, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedTasks")
					return
				}
			}
		case "ExtractedUrls":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExtractedUrls = nil
			} else {
				if z.ExtractedUrls == nil {
					z.ExtractedUrls = new(string)
				}
				*z.ExtractedUrls, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExtractedUrls")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ExtractedEntity) Msgsize() (s int) {
	s = 1 + 19
	if z.ExtractedAddresses == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedAddresses)
	}
	s += 18
	if z.ExtractedContacts == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedContacts)
	}
	s += 16
	if z.ExtractedEmails == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedEmails)
	}
	s += 18
	if z.ExtractedMeetings == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedMeetings)
	}
	s += 16
	if z.ExtractedPhones == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedPhones)
	}
	s += 15
	if z.ExtractedTasks == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedTasks)
	}
	s += 14
	if z.ExtractedUrls == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.ExtractedUrls)
	}
	return
}
