package properties

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SMS) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OmsAccountGuid":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OmsAccountGuid")
					return
				}
				z.OmsAccountGuid = nil
			} else {
				if z.OmsAccountGuid == nil {
					z.OmsAccountGuid = new(string)
				}
				*z.OmsAccountGuid, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OmsAccountGuid")
					return
				}
			}
		case "OmsMobileModel":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OmsMobileModel")
					return
				}
				z.OmsMobileModel = nil
			} else {
				if z.OmsMobileModel == nil {
					z.OmsMobileModel = new(string)
				}
				*z.OmsMobileModel, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OmsMobileModel")
					return
				}
			}
		case "OmsScheduleTime":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OmsScheduleTime")
					return
				}
				z.OmsScheduleTime = nil
			} else {
				if z.OmsScheduleTime == nil {
					z.OmsScheduleTime = new(int64)
				}
				*z.OmsScheduleTime, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "OmsScheduleTime")
					return
				}
			}
		case "OmsServiceType":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OmsServiceType")
					return
				}
				z.OmsServiceType = nil
			} else {
				if z.OmsServiceType == nil {
					z.OmsServiceType = new(int32)
				}
				*z.OmsServiceType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "OmsServiceType")
					return
				}
			}
		case "OmsSourceType":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OmsSourceType")
					return
				}
				z.OmsSourceType = nil
			} else {
				if z.OmsSourceType == nil {
					z.OmsSourceType = new(int32)
				}
				*z.OmsSourceType, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "OmsSourceType")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SMS) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "OmsAccountGuid"
	err = en.Append(0x85, 0xae, 0x4f, 0x6d, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	if z.OmsAccountGuid == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.OmsAccountGuid)
		if err != nil {
			err = msgp.WrapError(err, "OmsAccountGuid")
			return
		}
	}
	// write "OmsMobileModel"
	err = en.Append(0xae, 0x4f, 0x6d, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c)
	if err != nil {
		return
	}
	if z.OmsMobileModel == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.OmsMobileModel)
		if err != nil {
			err = msgp.WrapError(err, "OmsMobileModel")
			return
		}
	}
	// write "OmsScheduleTime"
	err = en.Append(0xaf, 0x4f, 0x6d, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.OmsScheduleTime == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.OmsScheduleTime)
		if err != nil {
			err = msgp.WrapError(err, "OmsScheduleTime")
			return
		}
	}
	// write "OmsServiceType"
	err = en.Append(0xae, 0x4f, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.OmsServiceType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt32(*z.OmsServiceType)
		if err != nil {
			err = msgp.WrapError(err, "OmsServiceType")
			return
		}
	}
	// write "OmsSourceType"
	err = en.Append(0xad, 0x4f, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.OmsSourceType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt32(*z.OmsSourceType)
		if err != nil {
			err = msgp.WrapError(err, "OmsSourceType")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SMS) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "OmsAccountGuid"
	o = append(o, 0x85, 0xae, 0x4f, 0x6d, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64)
	if z.OmsAccountGuid == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.OmsAccountGuid)
	}
	// string "OmsMobileModel"
	o = append(o, 0xae, 0x4f, 0x6d, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c)
	if z.OmsMobileModel == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.OmsMobileModel)
	}
	// string "OmsScheduleTime"
	o = append(o, 0xaf, 0x4f, 0x6d, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if z.OmsScheduleTime == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.OmsScheduleTime)
	}
	// string "OmsServiceType"
	o = append(o, 0xae, 0x4f, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65)
	if z.OmsServiceType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt32(o, *z.OmsServiceType)
	}
	// string "OmsSourceType"
	o = append(o, 0xad, 0x4f, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65)
	if z.OmsSourceType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt32(o, *z.OmsSourceType)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SMS) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OmsAccountGuid":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OmsAccountGuid = nil
			} else {
				if z.OmsAccountGuid == nil {
					z.OmsAccountGuid = new(string)
				}
				*z.OmsAccountGuid, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OmsAccountGuid")
					return
				}
			}
		case "OmsMobileModel":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OmsMobileModel = nil
			} else {
				if z.OmsMobileModel == nil {
					z.OmsMobileModel = new(string)
				}
				*z.OmsMobileModel, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OmsMobileModel")
					return
				}
			}
		case "OmsScheduleTime":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OmsScheduleTime = nil
			} else {
				if z.OmsScheduleTime == nil {
					z.OmsScheduleTime = new(int64)
				}
				*z.OmsScheduleTime, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OmsScheduleTime")
					return
				}
			}
		case "OmsServiceType":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OmsServiceType = nil
			} else {
				if z.OmsServiceType == nil {
					z.OmsServiceType = new(int32)
				}
				*z.OmsServiceType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OmsServiceType")
					return
				}
			}
		case "OmsSourceType":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OmsSourceType = nil
			} else {
				if z.OmsSourceType == nil {
					z.OmsSourceType = new(int32)
				}
				*z.OmsSourceType, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OmsSourceType")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SMS) Msgsize() (s int) {
	s = 1 + 15
	if z.OmsAccountGuid == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OmsAccountGuid)
	}
	s += 15
	if z.OmsMobileModel == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.OmsMobileModel)
	}
	s += 16
	if z.OmsScheduleTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 15
	if z.OmsServiceType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	s += 14
	if z.OmsSourceType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int32Size
	}
	return
}
